openapi: "3.0.2"
info:
  title: API Articoding
  description: This API is used to handle requests to the backend of the Articoding video game
  version: "1.0.0"
servers:
  - url: http://localhost:3001
    description: "Dev"
tags:
  - name: level
  - name: user
  - name: group
paths:
  /api/level/categories:
    get:
      tags:
        - level
      summary: Get all the categories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryArray"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/level/{id}:
    get:
      tags:
        - level
      summary: Get an specific level
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The level id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Level"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "404":
          $ref: "#/components/responses/NotFound"
  /api/level/all:
    get:
      tags:
        - level
      summary: Get all the levels, except de Json level data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LevelArray"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/level/create:
    post:
      tags:
        - level
      summary: Insert a level in the DB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Level"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Level"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/level/levelsByCategory/{id}:
    get:
      tags:
        - level
      summary: Get all the levels of a specific category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The category id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LevelArray"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/level/community/levels:
    get:
      tags:
        - level
      summary: Get all community levels
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LevelArray"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/user/create:
    post:
      tags:
        - user
      summary: Insert a user in the DB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userName
                - userPassword
              properties:
                userName:
                  type: string
                userPassword:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/user/login:
    post:
      tags:
        - user
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - password
              properties:
                id:
                  type: integer
                password:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/group/{groupId}:
    get:
      tags:
        - group
      summary: Get an specific group
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
            minimum: 1
          description: The group id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/group/all:
    get:
      tags:
        - group
      summary: Get all the groups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupArray"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/group/{groupId}/members:
    get:
      tags:
        - group
      summary: Get the members of the group
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
            minimum: 1
          description: The group id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemberArray"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/group/create:
    post:
      tags:
        - group
      summary: Create a new group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - userId
              properties:
                name:
                  type: string
                  example: grupo prueba
                userId:
                  type: integer
                  example: 4
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: "#/components/schemas/Group"
                  set:
                    $ref: "#/components/schemas/Member"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/group/register:
    post:
      tags:
        - group
      summary: Resgister an user in a group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupId
                - userId
              properties:
                groupId:
                  type: integer
                  example: 14
                userId:
                  type: integer
                  example: 4
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Member"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  responses:
    InternalServerError:
      description: Internal Server Error
    NotFound:
      description: Can't be found
    Unauthorized:
      description: Invalid credentials
  schemas:
    Number:
      type: integer
      readOnly: true
      example: 2
    Level:
      type: object
      required:
        - user
        - category
        - self
        - title
        - data
      properties:
        id:
          type: integer
          format: uuid
          readOnly: true
        user:
          type: integer
        category:
          type: integer
        self:
          type: integer
        title:
          type: string
        data:
          type: string
          example: JSON string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
    CategoryArray:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    LevelArray:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: uuid
            readOnly: true
          user:
            type: integer
          category:
            type: integer
          self:
            type: integer
          title:
            type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          readOnly: true
        name:
          type: string
        role:
          type: string
          enum: [Estudiante, Admin, Profesor, Investigador]
    Group:
      type: object
      properties:
        id:
          type: integer
          format: uuid
          readOnly: true
          example: 14
        name:
          type: string
          example: grupo prueba
    GroupArray:
      type: array
      items:
        $ref: "#/components/schemas/Group"
    Member:
      type: object
      properties:
        group:
          type: integer
          format: uuid
          example: 14
        user:
          type: integer
          format: uuid
          example: 4
        role:
          type: string
          enum: [Miembro, Anfitrión]
          example: Miembro | Anfitrión
    MemberArray:
      type: array
      items:
        $ref: "#/components/schemas/Member"
